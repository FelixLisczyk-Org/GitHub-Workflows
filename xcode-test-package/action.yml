name: Xcode Run Unit Tests in Package
description: Xcode Run Unit Tests in Package
inputs:
  platform:
    description: "Target Build Platform"
  scheme:
    description: "Xcode Scheme Name"
  retry_failed_tests:
    description: "Retry Failed Tests"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Generate Xcode Project
      run: |
        if [ -f project.yml ]; then
          xcodegen
        elif [ -f Tuist.swift ]; then
          tuist install && tuist cache && tuist generate --no-open
        fi
      shell: bash -leo pipefail {0}
    - name: Run Unit Tests (iOS)
      run: |
        if ls *.xcworkspace >/dev/null 2>&1; then
          workspace=$(find . -name '*.xcworkspace' -maxdepth 1 | head -n 1)
          xcodebuild -workspace "$workspace" -scheme '${{ inputs.scheme }}' -destination 'platform=iOS Simulator,name=iPhone 16 Pro' test \
          ${{ inputs.retry_failed_tests && '-retry-tests-on-failure' || '' }}
        else
          swift test
        fi
      shell: bash -leo pipefail {0}
      if: inputs.platform == 'ios'
    - name: Run Unit Tests (macOS)
      run: |
        if ls *.xcworkspace >/dev/null 2>&1; then
          workspace=$(find . -name '*.xcworkspace' -maxdepth 1 | head -n 1)
          xcodebuild -workspace "$workspace" -scheme '${{ inputs.scheme }}' -sdk macosx test -allowProvisioningUpdates \
          ${{ inputs.retry_failed_tests && '-retry-tests-on-failure' || '' }}
        else
          swift test
        fi
      shell: bash -leo pipefail {0}
      if: inputs.platform == 'mac'
