name: Select Xcode Version
description: Select the appropriate Xcode version based on the branch
inputs:
  runner-root-password:
    description: "Root password for sudo operations"
    required: true
outputs:
  original-xcode-path:
    description: "The original Xcode path before selection"
    value: ${{ steps.select-xcode.outputs.ORIGINAL_XCODE_PATH }}
runs:
  using: "composite"
  steps:
    - name: (Local) Select Xcode Version
      id: select-xcode
      run: |
        # Save the current Xcode path
        ORIGINAL_XCODE_PATH=$(xcode-select -p)
        echo "ORIGINAL_XCODE_PATH=$ORIGINAL_XCODE_PATH" >> $GITHUB_OUTPUT

        # Get all Xcode paths
        ALL_XCODE_PATHS=$(find /Applications -maxdepth 1 \( -name "Xcode.app" -o -name "Xcode-*.app" \) 2>/dev/null | sort -V)

        if [ "${{ github.ref }}" == "refs/heads/beta" ]; then
          # Select Beta Xcode if on beta branch
          XCODE_PATH=$(echo "$ALL_XCODE_PATHS" | grep "Beta" | tail -n 1 || echo "")
          if [ -z "$XCODE_PATH" ]; then
            echo "Notice: No Beta Xcode version found, falling back to stable"
            XCODE_PATH=$(echo "$ALL_XCODE_PATHS" | grep -v "Beta" | tail -n 1 || echo "")
          fi
        else
          # Select stable Xcode
          XCODE_PATH=$(echo "$ALL_XCODE_PATHS" | grep -v "Beta" | tail -n 1 || echo "")
        fi

        if [ -z "$XCODE_PATH" ]; then
          echo "Error: No suitable Xcode version found"
          exit 1
        fi

        echo "Selected Xcode: $XCODE_PATH"
        echo "${{ inputs.runner-root-password }}" | sudo -S xcode-select -s "$XCODE_PATH"
        xcodebuild -version
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/') == false
