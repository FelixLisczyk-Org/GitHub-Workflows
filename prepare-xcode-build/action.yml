name: Prepare Xcode Build
description: Prepare Xcode Build
inputs:
  p12-file-development:
    description: "Development Certificate File (required for dev and release builds)"
  p12-file-development-password:
    description: "Development Certificate Password (required for dev and release builds)"
  p12-file-distribution:
    description: "Distribution Certificate File (required for release builds)"
  p12-file-distribution-password:
    description: "Distribution Certificate Password (required for release builds)"
  ssh-private-key:
    description: "Private SSH Key (required for cloud runner)"
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: (Cloud) Set Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      if: contains(runner.workspace, '/Users/runner/')
    - name: Import Development Certificate
      id: create_keychain
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ inputs.p12-file-development }}
        p12-password: ${{ inputs.p12-file-development-password }}
      if: inputs.p12-file-development != '' && inputs.p12-file-development-password != ''
    - name: Import Distribution Certificate
      uses: apple-actions/import-codesign-certs@v2
      with:
        create-keychain: false
        keychain-password: "${{ steps.create_keychain.outputs.keychain-password }}"
        p12-file-base64: ${{ inputs.p12-file-distribution }}
        p12-password: ${{ inputs.p12-file-distribution-password }}
      if: inputs.p12-file-distribution != '' && inputs.p12-file-distribution-password != ''
    - name: (Cloud) Load SSH Private Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}
      if: contains(runner.workspace, '/Users/runner/') && inputs.ssh-private-key != ''
    - name: Clone Swift Packages over SSH
      run: git config --global url."git@github.com:".insteadOf "https://github.com/"
      shell: bash -leo pipefail {0}
      # This step is required for the cache actions to find the `zstd` executable in the Homebrew directory.
    - name: (Local) Add PATH to GITHUB_PATH
      run: echo $PATH >> $GITHUB_PATH
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/') == false
    - name: (Cloud) Cache Mint Build Folder
      uses: actions/cache@v3
      with:
        path: ~/.mint
        key: ${{ runner.os }}-mint
      if: contains(runner.workspace, '/Users/runner/')
    - name: (Cloud) Install Build Tools
      run: brew install mint sourcery swiftgen && echo "$HOME/.mint/bin" >> $GITHUB_PATH && mint install yonaskolb/xcodegen@2.32.0
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/')
    - name: Check if Gemfile exists
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: "Gemfile"
    - name: Install fastlane
      run: bundle install
      shell: bash -leo pipefail {0}
      if: steps.check_files.outputs.files_exists == 'true'
