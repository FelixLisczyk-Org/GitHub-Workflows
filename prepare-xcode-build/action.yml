name: Prepare Xcode Build
description: Prepare Xcode Build
inputs:
  branch:
    description: "Custom ref/branch to check out (required for TestFlight submission workflow; defaults to the commit of the job that triggered this workflow)"
  p12_file_development:
    description: "Development Certificate File (required for dev and release builds)"
  p12_file_development_password:
    description: "Development Certificate Password (required for dev and release builds)"
  p12_file_distribution:
    description: "Distribution Certificate File (required for release builds)"
  p12_file_distribution_password:
    description: "Distribution Certificate Password (required for release builds)"
  ssh_private_key:
    description: "Private SSH Key (required for cloud runner)"
  runner_root_password:
    description: "Root password for sudo operations"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for scripts that access multiple branches, e.g. `increment-build-number.sh`
        ref: ${{ inputs.branch || '' }}
    - name: (Local) Select Xcode Version
      id: select-xcode
      uses: FelixLisczyk-Org/GitHub-Workflows/xcode-select-version@main
      with:
        use_beta_xcode: ${{ github.ref == 'refs/heads/beta' }}
        runner_root_password: ${{ inputs.runner_root_password }}
    - name: (Local) Store Original Xcode Path # for later use in `finish-xcode-build`
      run: echo "ORIGINAL_XCODE_PATH=${{ steps.select-xcode.outputs.original_xcode_path }}" >> $GITHUB_ENV
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/') == false
    - name: (Cloud) Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      if: contains(runner.workspace, '/Users/runner/')
    - name: Allow Swift Macros to be executed
      run: defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
      shell: bash -leo pipefail {0}
    - name: Cleanup existing 'signing_temp' keychain if present
      run: |
        if security list-keychains | grep -q 'signing_temp.keychain-db'; then
          echo "Deleting leftover 'signing_temp' keychain..."
          security delete-keychain signing_temp.keychain-db
        fi
      shell: bash -leo pipefail {0}
      # This step is important if the previous workflow was interrupted and the keychain cleanup in the 'finish-xcode-build' step didn't run
    - name: Import Development Certificate
      id: create_keychain
      uses: apple-actions/import-codesign-certs@v5.0.3
      with:
        p12-file-base64: ${{ inputs.p12_file_development }}
        p12-password: ${{ inputs.p12_file_development_password }}
      if: inputs.p12_file_development != '' && inputs.p12_file_development_password != ''
    - name: Import Distribution Certificate
      uses: apple-actions/import-codesign-certs@v5.0.3
      with:
        create-keychain: false
        keychain-password: "${{ steps.create_keychain.outputs.keychain-password }}"
        p12-file-base64: ${{ inputs.p12_file_distribution }}
        p12-password: ${{ inputs.p12_file_distribution_password }}
      if: inputs.p12_file_distribution != '' && inputs.p12_file_distribution_password != ''
    - name: (Cloud) Load SSH Private Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}
      if: contains(runner.workspace, '/Users/runner/') && inputs.ssh_private_key != ''
    - name: Clone Swift Packages over SSH
      run: git config --global url."git@github.com:".insteadOf "https://github.com/"
      shell: bash -leo pipefail {0}
      # This step is required for the cache actions to find the `zstd` executable in the Homebrew directory.
    - name: (Local) Add PATH to GITHUB_PATH
      run: echo $PATH >> $GITHUB_PATH
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/') == false
    - name: (Cloud) Install Build Tools
      run: |
        brew update
        brew install sourcery swiftgen tuist xcodegen xcbeautify
      shell: bash -leo pipefail {0}
      if: contains(runner.workspace, '/Users/runner/')
    - name: Check if Gemfile exists
      id: check_files
      uses: andstor/file-existence-action@v3
      with:
        files: "Gemfile"
    - name: Install fastlane
      run: bundle install
      shell: bash -leo pipefail {0}
      if: steps.check_files.outputs.files_exists == 'true'
